# syntax=docker/dockerfile:1
ARG SCOPE
ARG PROJECT

ARG USER=node
ARG WORKSPACE=/workspace

ARG DOCKER_NODE_VERSION=latest
ARG DOCKER_UBUNTU_VERSION=latest
ARG DOCKER_NGINX_VERSION=latest

# ========================== NODE STAGE ==========================
FROM node:${DOCKER_NODE_VERSION} AS node
# Copy all the required libraries for Node to run in a scratch container
RUN mkdir -p /node-deps/lib/x86_64-linux-gnu \
      /node-deps/usr/lib/x86_64-linux-gnu \
      /node-deps/lib64 \
    && ldd $(which node) \
      | grep '=>' \
      | awk '{ print $3 }' \
      | xargs -I '{}' cp -v '{}' /node-deps'{}'


# ========================== TURBO STAGE ==========================
FROM node:${DOCKER_NODE_VERSION} AS turbo
ARG SCOPE
ARG PROJECT
ARG WORKSPACE
WORKDIR ${WORKSPACE}

COPY --chown=${USER}:${USER} ./package*.json ./
RUN npm install

COPY --chown=${USER}:${USER} ./ ./
RUN npx --no-install turbo prune ${SCOPE}/${PROJECT} --docker \
    && mv ./out/package-lock.json ./out/full/package-lock.json


# ========================== DEV MODULES STAGE ==========================
FROM node:${DOCKER_NODE_VERSION} AS dev-modules
ARG WORKSPACE

WORKDIR ${WORKSPACE}
COPY --from=turbo --chown=${USER}:${USER} ${WORKSPACE}/out/json ./

RUN npm install

# ========================== PROD MODULES STAGE ==========================
FROM node:${DOCKER_NODE_VERSION} AS prod-modules
ARG WORKSPACE

WORKDIR ${WORKSPACE}
COPY --from=turbo --chown=${USER}:${USER} ${WORKSPACE}/out/json ./

RUN npm install --omit=dev


# ========================== BASE STAGE ==========================
FROM ubuntu:${DOCKER_UBUNTU_VERSION} AS base
ARG PROJECT
ARG USER
ARG WORKSPACE

RUN apt-get update \
    && apt-get -qq install -y --no-install-recommends \
    # Install Tini for signal handling
    tini

# Copy Node/NPM binaries and libraries
COPY --from=node /usr/local/include/ /usr/local/include/
COPY --from=node /usr/local/lib/ /usr/local/lib/
COPY --from=node /usr/local/bin/ /usr/local/bin/

# Create user and workspace
RUN groupadd --gid 1000 ${USER} \
    && useradd --uid 1000 --gid ${USER} --shell /bin/bash --create-home ${USER} \
    && mkdir ${WORKSPACE} \
    && chown -R ${USER}:${USER} ${WORKSPACE}

USER ${USER}
WORKDIR ${WORKSPACE}

COPY --from=turbo --chown=${USER}:${USER} ${WORKSPACE}/out/full ./


# ========================== DEVELOPMENT STAGE ==========================
FROM base AS development
ENV NODE_ENV=development

COPY --from=dev-modules --chown=${USER}:${USER} ${WORKSPACE}/node_modules ./node_modules

WORKDIR ${WORKSPACE}/apps/${PROJECT}

ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["npm", "run", "start:dev"]


# ========================== BUILD STAGE ==========================
FROM base AS build

COPY --from=dev-modules --chown=${USER}:${USER} ${WORKSPACE}/node_modules ./node_modules
RUN npx --no-install turbo run build --filter='./apps/*'


# ========================== PRODUCTION STAGE ==========================
FROM nginx:${DOCKER_NGINX_VERSION} AS production
ARG WORKSPACE
ARG PROJECT

COPY ./docker/nginx/templates/nginx.conf /etc/nginx/templates/default.conf.template
COPY --from=build ${WORKSPACE}/apps/${PROJECT}/dist /usr/share/nginx/html
